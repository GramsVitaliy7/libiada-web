@model dynamic

@{
    ViewBag.Title = "Clusterization results";
}

<h2>Clusterization results</h2>

@if (ViewBag.Error == null)
{
    <script type='text/javascript'>
        var characteristics = new Array();
        var clusters = new Array();
        var matterIds = new Array();
        var colors = new Array();
        var sequenceNames = new Array();

        $(document).ready(function() {
            colors.push("rgba(223, 83, 83, .5)");
            colors.push("rgba( 83, 223, 83, .5)");
            colors.push("rgba( 83, 83, 223, .5)");
            colors.push("rgba( 83, 83, 83, .5)");
            colors.push("rgba( 150, 0, 0, .5)");
            colors.push("rgba( 0, 150, 0, .5)");
            colors.push("rgba( 0, 0, 150  .5)");

            //TODO: брать данные прямо из viewbag, т.к. в таблице другой порядок
            var rows = $("#resultTable")[0].tBodies[0].rows;
            var clusterNumber = 0;
            for (var i = 1; i < rows.length; i++) {
                if (clusterNumber < rows[i].cells[0].textContent) {
                    sequenceNames.push(new Array());
                    clusterNumber++;
                }

                sequenceNames[clusterNumber - 1].push(rows[i].cells[1].textContent);
            }

            @for (int j = 0; j < ViewBag.characteristics.Count; j++)
            {
                <text>
                    characteristics.push(new Array());
                    matterIds.push(@ViewBag.matterIds[j]);
                </text>

                var characteristicList = ViewBag.characteristics[j];
                for (int i = 0; i < characteristicList.Count; i++)
                {
                    string[] tempValue = characteristicList[i].ToString().Split(',');
                    string value = tempValue.Length == 2 ? tempValue[0] + "." + tempValue[1] : tempValue[0];
                    @: characteristics[characteristics.length - 1].push(@value);
                }
            }
            @for (int i = 0; i < ViewBag.clusters.Count; i++)
            {
                @: clusters.push(new Array());
                for (int j = 0; j < ViewBag.clusters[i].Count; j++)
                {
                    @: clusters[clusters.length - 1].push(@ViewBag.clusters[i][j]);
                }
            }
        });


        var newChart;

        function DrawChart() {
            var dataSeries = new Array();
            for (var i = 0; i < clusters.length; i++) {
                dataSeries.push(new Object());
                dataSeries[i].data = new Array();
                dataSeries[i].name = "Кластер " + (i + 1);
                dataSeries[i].color = colors[i];
                for (var j = 0; j < clusters[i].length; j++) {
                    var matterIndex = matterIds.indexOf(clusters[i][j]);
                    var xcharacteristicId = $("#xaxis option:selected")[0].value;
                    var ycharacteristicId = $("#yaxis option:selected")[0].value;
                    var x = characteristics[matterIndex][xcharacteristicId];
                    var y = characteristics[matterIndex][ycharacteristicId];
                    var pointName = sequenceNames[i][j];
                    dataSeries[i].data[j] = new Object();
                    dataSeries[i].data[j].x = x;
                    dataSeries[i].data[j].y = y;
                    dataSeries[i].data[j].name = pointName;
                }
            }

            chart = new Highcharts.Chart({
                chart: { renderTo: "visualization_container", defaultSeriesType: "scatter", zoomType: "xy" },

                legend: { align: "left", backgroundColor: "#FFFFFF", borderWidth: 1, floating: true, layout: "vertical", verticalAlign: "top", x: 100, y: 50 },

                plotOptions: { scatter: { marker: { radius: 5, states: { hover: { enabled: true, lineColor: "#646464" } } }, states: { hover: { enabled: true } } } },

                title: { text: "Clusterization results" },

                tooltip: {
                    formatter: function() {
                        return this.point.name + "<br/>" + this.x + "<br/> " + this.y;
                    }
                },

                xAxis: { gridLineWidth: 1, endOnTick: true, showLastLabel: true, startOnTick: true, title: { text: $("#xaxis option:selected")[0].text } },

                yAxis: { gridLineWidth: 1, title: { text: $("#yaxis option:selected")[0].text } },

                series: dataSeries

            });

        }
    </script>

    <table class="table table-bordered table-hover">
        <thead>
        <tr>
            <th>
                Cluster number
            </th>
            <th>
                Sequence name
            </th>
            <th>sequence id</th>
        </tr>
        </thead>
        <tbody>
        @for (int i = 0; i < ViewBag.clusterNames.Count; i++)
        {
            foreach (var sequence in ViewBag.clusterNames[i])
            {
                <tr>
                    <td>
                        @(i + 1)
                    </td>
                    <td>
                        @sequence
                    </td>
                    <td>
                        @ViewBag.matterIds[ViewBag.sequenceNames.IndexOf(sequence)]
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>
    <br/>

    <div id="visualization_container" style="width: 800px; height: 800px"></div>
    <br/>
    @Html.Label("Ось х")
    <select name="xaxis" id="xaxis">
        @foreach (var option in ViewBag.characteristicsList)
        {
            <option value="@option.Value">@option.Text</option>
        }
    </select>
    <br/>
    @Html.Label("Ось y")
    <select name="yaxis" id="yaxis">
        @foreach (var option in ViewBag.characteristicsList)
        {
            <option value="@option.Value">@option.Text</option>
        }
    </select>
    <br/>
    <button onclick=" DrawChart() ">Show results</button>
}