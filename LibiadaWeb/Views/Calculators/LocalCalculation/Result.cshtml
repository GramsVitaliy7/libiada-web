@model dynamic

@{
    ViewBag.Title = "Local characteristics";
}

<h2>Local characteristics</h2>

@if (ViewBag.Error == null)
{
    <script type='text/javascript'>
        var graph_data  = @Html.Raw(Json.Encode(ViewBag));

        // Load the Visualization API and the controls package.
        google.load('visualization', '1.0', {
            'packages': ['controls']
        });

        // Set a callback to run when the Google Visualization API is loaded.
        google.setOnLoadCallback(drawDashboard);

        // Callback that creates and populates a data table,
        // instantiates a dashboard, a range slider and a pie chart,
        // passes in the data and draws it.
        function max_value(arrays) {
            return Math.max.apply(Math, arrays);
        }

        function formCharateristics(data, numberCharacterisctic) {
            var points = [];
            for (i = 0; i < data['characteristics'].length; i++) {
                var current_object = data['characteristics'][i];

                points.push([]);
                for (j = 0; j < current_object.length; j++) {
                    points[i].push(current_object[j][numberCharacterisctic]);
                }
            }
            return points;
        }

        function formSortedByRank(points) {
            var sorted = [];
            for (i = 0; i < points.length; i++) {
                var cur_array =  points[i].slice(0);
                if (i ==0) {
                    sorted.push(cur_array.sort());
                }
                else {
                    sorted.push(cur_array.sort(function(a,b) { return b-a;}));
                }
            }
            return sorted;
        }

        function getArrayLength(array) {
            var arrays_lengths = [];
            for (i = 0; i < array.length; i++) {
                arrays_lengths.push(array[i].length);
            }

            return arrays_lengths;
        }

        function formChartsData(graph_data, arrays_lengths, points) {
            var charts_data = [];
            charts_data.push(['fragment']);

            for (var i = 0; i < graph_data['matterNames'].length; i++) {
                charts_data[0].push(graph_data['matterNames'][i]);
            }

            for (var i = 0; i < points.length; i++) {
                var cur = points[i];

                for (var j = 1; j <= max_value(arrays_lengths); j++) {
                    if (i == 0) {
                        charts_data.push([]);
                        charts_data[j].push(j);
                    }
                    charts_data[j].push(points[i][j - 1]);
                }
            }
            return charts_data;
        }

        function isNumber(n) {
            return !isNaN(parseFloat(n)) && isFinite(n);
        }

        function lineChart(yName) {
            return new google.visualization.ChartWrapper({
                chartType: 'LineChart',
                containerId: 'chart_div',
                options: {
                    hAxis: { title: 'Fragments'},
                    vAxis: {title: yName},
                    width: 1200,
                    height: 600,
                    pieSliceText: 'value',
                    legend: 'top',
                    explorer: {
                        maxZoomOut: 12,
                        keepInBounds: true
                    }
                }
            });
        }

        function areaChart(yName) {
            return new google.visualization.ChartWrapper({
                chartType: 'AreaChart',
                containerId: 'chart_div',
                options: {
                    hAxis: { title: 'Fragments'},
                    vAxis: {title: yName},
                    width: 1200,
                    height: 600,
                    pieSliceText: 'value',
                    legend: 'top',
                    explorer: {
                        maxZoomOut: 12,
                        keepInBounds: true
                    }
                }
            });
        }

        function scatterChart(yName) {
            return new google.visualization.ChartWrapper({
                chartType: 'ScatterChart',
                containerId: 'chart_div',
                options: {
                    hAxis: { title: 'Fragments'},
                    vAxis: {title: yName},
                    width: 1200,
                    height: 600,
                    pieSliceText: 'value',
                    legend: 'top',
                    explorer: {
                        maxZoomOut: 12,
                        keepInBounds: true
                    }
                }
            });
        }


        function drawDashboard(numberCurrentCharacterictic, typeGraph, distribution) {
            var numberCharacterisctic;
            if (isNumber(numberCurrentCharacterictic)) {
                numberCharacterisctic = numberCurrentCharacterictic;
            }
            else {
                numberCharacterisctic = 0;
            }

            var points = formCharateristics(graph_data, numberCharacterisctic);
            var arrays_lengths = getArrayLength(points);

            if (distribution == 1) {
                points = formSortedByRank(points);
            } else if (distribution == 0 || !isNumber(distribution) ){
                points = formCharateristics(graph_data, numberCharacterisctic)
            }

            var charts_data = formChartsData(graph_data, arrays_lengths, points);

            var data = google.visualization.arrayToDataTable(charts_data);

            // Create a dashboard.
            var dashboard = new google.visualization.Dashboard(document.getElementById('dashboard_div'));

            // Create a range slider, passing some options
            var numberRangeFilter = new google.visualization.ControlWrapper({
                controlType: 'NumberRangeFilter',
                containerId: 'filter_div',
                options: {
                    filterColumnLabel: 'fragment'
                }
            });


            var typeChart;
            var yName = graph_data['characteristicNames'][0];
            if (isNumber(typeGraph) && typeGraph == 1) {
                typeChart = areaChart(yName);
            }
            else if(isNumber(typeGraph) && typeGraph == 2) {
                typeChart = scatterChart(yName);
            }
            else if (typeGraph == 0 || !isNumber(typeGraph)) {
                typeChart = lineChart(yName);
            }

            // Establish dependencies, declaring that 'filter' drives 'lineChart',
            // so that the pie chart will only display entries that are let through
            // given the chosen slider range.
            dashboard.bind(numberRangeFilter, typeChart);

            dashboard.draw(data);
        }

        $(function(){
            $.each(graph_data['characteristicNames'], function(key, value) {
                $('.characteristic').append($('<option></option>').attr('value', key).text(value));
            });

            $('.characteristic').on('change', function() {
                drawDashboard(parseInt($(this).val()), parseInt($('.typeChart').val()), parseInt($('.distribution').val()));
            });

            $('.distribution').on('change', function () {
                drawDashboard(parseInt($('.characteristic').val()), parseInt($('.typeChart').val()), parseInt($(this).val()));
            });

            $('.typeChart').on('change', function () {
                drawDashboard(parseInt($('.characteristic').val()), parseInt($(this).val()), parseInt($('.distribution').val()));
            });
        });
        
    </script>

    for (int k = 0; k < ViewBag.matterNames.Count; k++)
    {
        <div>@ViewBag.matterNames[k]</div>
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>
                        Start
                    </th>
                    <th>
                        Length
                    </th>
                    @foreach (var characteristicName in ViewBag.characteristicNames)
                    {
                        <th>
                            @characteristicName
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @for (int i = 0; i < ViewBag.characteristics[k].Count; i++)
                {
                    <tr>
                        <td>
                            @ViewBag.starts[k][i]
                        </td>
                        <td>
                            @ViewBag.lengthes[k][i]
                        </td>
                        @foreach (var characteristic in ViewBag.characteristics[k][i])
                        {
                            <td>
                                @characteristic
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    }
    <div id="google_chart" style="margin-bottom: 20px">
        <div style='height:600px;'>
            <!--Div that will hold the dashboard-->
            <div id="dashboard_div">
                <!--Divs that will hold each control and chart-->
                <div id="chart_div"></div>
                <div id="filter_div"></div>
            </div>
            <select class="characteristic"></select>
            <select class="distribution">
                <option value="0">Common</option>
                <option value="1">Rank</option>
            </select>
            <select class="typeChart">
                <option value="0">Line</option>
                <option value="1">Area</option>
                <option value="2">Scatter</option>
            </select>
        </div>
    </div>
    <br />

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryui")
        @Scripts.Render("~/bundles/googlechart")
    }
}
