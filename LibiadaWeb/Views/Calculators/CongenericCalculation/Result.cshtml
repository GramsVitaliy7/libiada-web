@{
    ViewBag.Title = "Congeneric sequences characteristics";
}

<h2>@ViewBag.Title</h2>

@if (ViewBag.Error == null)
{
    <script type='text/javascript'>
        var characteristics = new Array();
        var elementNames = new Array();
        var colors = new Array();
        var theoreticalRanks = new Array();
        var characteristicNames = new Array();
        var matterNames = new Array();

        $(document).ready(function() {
            colors.push("rgba(223, 83, 83, .5)");
            colors.push("rgba( 83, 223, 83, .5)");
            colors.push("rgba( 83, 83, 223, .5)");
            colors.push("rgba( 83, 83, 83, .5)");
            colors.push("rgba( 150, 0, 0, .5)");
            colors.push("rgba( 0, 150, 0, .5)");
            colors.push("rgba( 0, 0, 150  .5)");

            @{
                for (int r = 0; r < ViewBag.characteristicNames.Count; r++)
                {
                    @: characteristicNames[@r] = "@ViewBag.characteristicNames[r]";
                }

                for (int t = 0; t < ViewBag.elementNames.Count; t++)
                {
                    @: elementNames[@t] = new Array();
                    for (int y = 0; y < ViewBag.elementNames[t].Count; y++)
                    {
                        @: elementNames[@t][@y] = "@ViewBag.elementNames[t][y]";
                    }
                }

                for (int h = 0; h < ViewBag.matterNames.Count; h++)
                {
                    @: matterNames[@h] = "@ViewBag.matterNames[h]";
                }

                for (int k = 0; k < ViewBag.characteristics.Count; k++)
                {
                    @: characteristics[@k] = new Array();
                    for (int j = 0; j < ViewBag.characteristics[k].Count; j++)
                    {
                        @: characteristics[@k][@j] = new Array();

                        for (int i = 0; i < ViewBag.characteristics[k][j].Count; i++)
                        {
                            string[] tempValue = ViewBag.characteristics[k][j][i].Value.ToString().Split(',');
                            string value = tempValue.Length == 2 ? tempValue[0] + "." + tempValue[1] : tempValue[0];
                            int key = ViewBag.characteristics[k][j][i].Key;
                            @: characteristics[@k][@j][@i] = {key: @key, value: @value} ;
                        }
                    }
                }

                if (ViewBag.theoreticalRanks != null)
                {
                    for (int c = 0; c < ViewBag.theoreticalRanks.Count; c++)
                    {
                        @:theoreticalRanks[@c] = new Array();
                        for (int f = 0; f < ViewBag.theoreticalRanks[c].Count; f++)
                        {
                            @:theoreticalRanks[@c][@f] = new Array();
                            for (int g = 0; g < ViewBag.theoreticalRanks[c][f].Count; g++)
                            {
                                string[] tempValue = ViewBag.theoreticalRanks[c][f][g].ToString().Split(',');
                                string value = tempValue.Length == 2 ? tempValue[0] + "." + tempValue[1] : tempValue[0];
                                @:theoreticalRanks[@c][@f][@g] = @value;
                            }
                        }
                    }
                }
            }
        });

        function SwitchXAxis() {
            if ($("#Rank")[0].checked) {
                $("#xhider")[0].hidden = true;
                $("#allGraphics")[0].disabled = "";
                $("#logarithmicScale")[0].disabled = "";
            } else {
                $("#xhider")[0].hidden = false;
                $("#allGraphics")[0].disabled = "disabled";
                $("#logarithmicScale")[0].disabled = "disabled";
            }
        }

        function SwitchYAxis() {
            if ($("#allGraphics")[0].checked) {
                $("#yhider")[0].hidden = true;
            } else {
                $("#yhider")[0].hidden = false;
            }
        }

        var xVals;
        var yVals;

        function FillSeries(characteristicId, characteristic2Id, dataSeries) {
            for (var k = 0; k < characteristics.length; k++) {
                var series = new Object();
                series.data = new Array();
                series.name = matterNames[k];
                for (var i = 0; i < characteristics[k][characteristicId].length; i++) {
                    var x = characteristics[k][characteristicId][i].value;
                    var y;
                    for (var j = 0; j < characteristics[k][characteristic2Id].length; j++) {
                        if (characteristics[k][characteristicId][i].key == characteristics[k][characteristic2Id][j].key) {
                            y = characteristics[k][characteristic2Id][j].value;
                            break;
                        }
                    }
                    var pointName = elementNames[k][i];
                    series.data[i] = new Object();
                    series.data[i].x = x;
                    series.data[i].y = y;
                    series.data[i].name = pointName;
                    xVals.push(x);
                    yVals.push(y);
                }
                dataSeries.push(series);
            }
        }

        function FillRankSeries(characteristicId, logarithmic, dataSeries) {
            for (var j = 0; j < characteristics.length; j++) {
                var series = new Object();
                series.data = new Array();
                series.type = "area";
                series.name = matterNames[j];
                for (var i = 0; i < characteristics[j][characteristicId].length; i++) {
                    var y = characteristics[j][characteristicId][i].value;
                    var pointName = elementNames[j][i];
                    series.data[i] = new Object();
                    series.data[i].x = i + 1;

                    series.data[i].y = y;
                    series.data[i].name = pointName;
                    
                    xVals.push(i);
                    yVals.push(y);
                }
                dataSeries.push(series);
            }
        }

        function FillTheoreticalRanks(characteristicId, logarithmic, dataSeries) {
            for (var j = 0; j < theoreticalRanks.length; j++) {
                var series = new Object();
                series.data = new Array();
                series.type = "area";
                series.name = "Theoretical distribution for " + matterNames[j];
                for (var i = 0; i < theoreticalRanks[j][characteristicId].length; i++) {
                    var y = theoreticalRanks[j][characteristicId][i];
                    var pointName = i + 1;
                    series.data[i] = new Object();
                    series.data[i].x = i + 1;

                    series.data[i].y = y;
                    series.data[i].name = pointName;
                    xVals.push(i);
                    yVals.push(y);
                }
                dataSeries.push(series);
            }
        }

        function CreateChart(dataSeries, minY, minX, rank, logarithmic) {
            chart = new Highcharts.Chart({
                chart: { renderTo: "visualization_container", defaultSeriesType: "scatter", zoomType: rank ? "x" : "xy" },

                legend: { align: "right", backgroundColor: "#FFFFFF", borderWidth: 1, floating: true, layout: "vertical", verticalAlign: "top", x: 0, y: 50 },

                plotOptions: { area: { fillColor: { linearGradient: [0, 0, 0, 300], stops: [] }, lineWidth: 1, marker: { enabled: false, states: { hover: { enabled: true, radius: 5 } } }, pointStart: 0, pointInterval: 1, shadow: false, states: { hover: { lineWidth: 1 } } } },

                title: { text: "Congeneric sequences distribution" },

                tooltip: {
                    formatter: function() {
                        return this.point.name + "<br/> " + this.x + "<br/>" + this.y;
                    }
                },

                xAxis: { min: logarithmic ? 1 : minX, type: logarithmic ? "logarithmic" : "linear", minorTickInterval: logarithmic ? 0.1 : 0, title: { text: rank ? "Rank" : $("#xaxis option:selected")[0].text } },

                yAxis: { endOnTick: false, startOnTick: false, min: minY, title: { text: $("#yaxis option:selected")[0].text } },

                series: dataSeries
            });
        }

        function DrawChart() {
            xVals = new Array();
            yVals = new Array();
            var dataSeries = new Array();
            var logarithmic = $("#logarithmicScale")[0].checked;
            var characteristicId;
            if ($("#allGraphics")[0].checked) {
                for (var j = 0; j < $("#yaxis option").length; j++) {
                    characteristicId = $("#yaxis option")[j].value;

                    FillRankSeries(characteristicId, logarithmic, dataSeries);

                    if (theoreticalRanks[0].length > 0) {
                        FillTheoreticalRanks(characteristicId, logarithmic, dataSeries);
                    }
                }
            } else {
                if ($("#Rank")[0].checked) {
                    characteristicId = $("#yaxis option:selected")[0].value;

                    FillRankSeries(characteristicId, logarithmic, dataSeries);

                    if (theoreticalRanks[0].length > 0) {
                        FillTheoreticalRanks(characteristicId, logarithmic, dataSeries);
                    }
                } else {
                    FillSeries($("#xaxis option:selected")[0].value, $("#yaxis option:selected")[0].value, dataSeries);
                }
            }

            CreateChart(dataSeries, Math.min.apply(null, yVals), Math.min.apply(null, xVals), $("#Rank")[0].checked, logarithmic);
        }

    </script>

    for (int d = 0; d < ViewBag.characteristics.Count; d++)
    {
        @ViewBag.matterNames[d]
        <table class="table table-bordered table-hover" id="resultTable">
            <thead>
            <tr>
                <th>
                    Element
                </th>
                @foreach (var characteristicName in ViewBag.characteristicNames)
                {
                    <th>
                        @characteristicName
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @for (int i = 0; i < ViewBag.characteristics[d][0].Count; i++)
            {
                <tr>
                    <td>
                        @ViewBag.elementNames[d][i]
                    </td>
                    @foreach (var characteristic in ViewBag.characteristics[d])
                    {
                        <td>
                            @characteristic[i].Value
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    }

    <br/>
    <div id="visualization_container" style="width: 800px; height: 500px"></div>
    <br/>
    <br/>
    <input type="checkbox" name="Rank" id="Rank" value="true" onclick=" SwitchXAxis() "/>
    <label for="Rank">Rank distribution</label>
    <br/>
    <input type="checkbox" name="allGraphics" id="allGraphics" value="true" disabled="disabled" onclick=" SwitchYAxis() "/>
    <label for="allGraphics">Show all charts</label>
    <br/>
    <input type="checkbox" name="logarithmicScale" id="logarithmicScale" value="true" disabled="disabled"/>
    <label for="logarithmicScale">Log scale</label>
    <br/>
    <br/>
    <div id="xhider">
        @Html.Label("X axis")
        <select name="xaxis" id="xaxis">
            @foreach (var option in ViewBag.characteristicsList)
            {
                <option value="@option.Value">@option.Text</option>
            }
        </select>
    </div>
    <br/>
    <div id="yhider">
        @Html.Label("Y axis")
        <select name="yaxis" id="yaxis">
            @foreach (var option in ViewBag.characteristicsList)
            {
                <option value="@option.Value">@option.Text</option>
            }
        </select>
    </div>
    <br/>
    <button onclick=" DrawChart() ">Show</button>
}