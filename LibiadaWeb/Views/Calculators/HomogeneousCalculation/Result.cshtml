@model dynamic

@{
    ViewBag.Title = "Характеристики однородных цепочек @ViewBag.chainName";
}

<h2>Характеристики однородных цепочек @ViewBag.chainName</h2>

<script type='text/javascript'>
    var characteristics = new Array();
    var partNames = new Array();
    var colors = new Array();
    var headers = new Array();
    var theoreticalRanks = new Array();

    $(document).ready(function() {
        colors.push('rgba(223, 83, 83, .5)');
        colors.push('rgba( 83, 223, 83, .5)');
        colors.push('rgba( 83, 83, 223, .5)');
        colors.push('rgba( 83, 83, 83, .5)');
        colors.push('rgba( 150, 0, 0, .5)');
        colors.push('rgba( 0, 150, 0, .5)');
        colors.push('rgba( 0, 0, 150  .5)');

        var tableHeaders = $("#resultTable")[0].tBodies[0].rows[0].cells;
        
        for (var k = 1; k < tableHeaders.length; k++) {
            headers.push(tableHeaders[k].textContent);
        }
        var rows = $("#resultTable")[0].tBodies[0].rows;
        for (var i = 0; i < rows.length; i++) {
            partNames.push(rows[i].cells[0].textContent);
        }
        @for (int k = 0; k < ViewBag.characteristics.Count; k++)
        {
            @: characteristics.push(new Array());
            for (int j = 0; j < ViewBag.characteristics[k].Count; j++)
            {
                @: characteristics[@k].push(new Array());

                for (int i = 0; i < ViewBag.characteristics[k][j].Count; i++)
                {
                    String[] tempValue = ViewBag.characteristics[k][j][i].Value.ToString().Split(',');
                    String value = tempValue.Length == 2 ? tempValue[0] + "." + tempValue[1] : tempValue[0];
                    int key = ViewBag.characteristics[k][j][i].Key;
                    @: characteristics[@k][@j][@i] = {key: @key, value: @value} ;
                }
            }
        }
        @if (ViewBag.theoreticalRanks != null)
        {
            for (int c = 0; c < ViewBag.theoreticalRanks.Count; c++)
            {
                @:theoreticalRanks.push(new Array()); 
                for (int f = 0; f < ViewBag.theoreticalRanks[c].Count; f++)
                {
                    String[] tempValue = ViewBag.theoreticalRanks[c][f].ToString().Split(',');
                    String value = tempValue.Length == 2 ? tempValue[0] + "." + tempValue[1] : tempValue[0];
                    @:theoreticalRanks[@c].push(@value); 
                }
            }
        }
        $("table").dataTable({
            bJQueryUI: true,
            sPaginationType: "full_numbers"
        });
    });

    function SwitchXAxis() {
        if($("#Rank")[0].checked) {
            $("#xhider")[0].hidden = true;
            $("#allGraphics")[0].disabled = "";
            $("#logarithmicScale")[0].disabled = "";
        } else {
            $("#xhider")[0].hidden = false;
            $("#allGraphics")[0].disabled = "disabled";
            $("#logarithmicScale")[0].disabled = "disabled";
        }
    }
    
    function SwitchYAxis() {
        if($("#allGraphics")[0].checked) {
            $("#yhider")[0].hidden = true;
        } else {
            $("#yhider")[0].hidden = false;
        }
    }

    var xVals;
    var yVals;
    var maxZoomX;
    
    // заполнение данных для двумерного распределения
    function FillSeries(characteristicId, characteristic2Id, dataSeries) {
        for (var k = 0; k < characteristics.length; k++) {
            var series = new Object();
            series.data = new Array();
            series.name = headers[characteristicId] + " и " + headers[characteristic2Id];
            for (var i = 0; i < partNames.length; i++) {
                var x = characteristics[k][characteristicId][i].value;
                var y;
                for (var j = 0; j < characteristics[k][characteristic2Id].length; j++) {
                    if (characteristics[k][characteristicId][i].key == characteristics[k][characteristic2Id][j].key) {
                        y = characteristics[k][characteristic2Id][j].value;
                        break;
                    }
                }
                var pointName = partNames[characteristics[k][characteristicId][i].key];
                series.data[i] = new Object();

                series.data[i].x = x;
                series.data[i].y = y;
                series.data[i].name = pointName;
                // массив для определения минимального значения для границ графика
                xVals.push(x);
                yVals.push(y);
            }
            dataSeries.push(series);
        }
    }

    // заполнение данных для рангового распределения
    function FillRankSeries(characteristicId, logarithmic, dataSeries) {
        for (var j = 0; j < characteristics.length; j++) {
            var series = new Object();
            series.data = new Array();
            series.type = 'area';
            series.name = headers[characteristicId];
            for (var i = 0; i < partNames.length; i++) {
                var y = characteristics[j][characteristicId][i].value;
                var pointName = partNames[characteristics[j][characteristicId][i].key];
                series.data[i] = new Object();
                if (logarithmic) {
                    series.data[i].x = Math.log(i + 1) / Math.log(10);
                    maxZoomX = 0.1;
                } else {
                    series.data[i].x = i + 1;
                    maxZoomX = 3;
                }

                series.data[i].y = y;
                series.data[i].name = pointName;
                // массив для определения минимального значения для границ графика
                xVals.push(i);
                yVals.push(y);
            }
            dataSeries.push(series);
        }
    }

    function FillTheoreticalRanks(logarithmic, dataSeries) {
        for (var j = 0; j < theoreticalRanks.length; j++) {
            var series = new Object();
            series.data = new Array();
            series.type = 'area';
            series.name = "Теоретическое распределение";
            for (var i = 0; i < theoreticalRanks[j].length; i++) {
                var y = theoreticalRanks[j][i];
                var pointName = i + 1;
                series.data[i] = new Object();
                if (logarithmic) {
                    series.data[i].x = Math.log(i + 1) / Math.log(10);
                    maxZoomX = 0.1;
                } else {
                    series.data[i].x = i + 1;
                    maxZoomX = 3;
                }

                series.data[i].y = y;
                series.data[i].name = pointName;
                // массив для определения минимального значения для границ графика
                xVals.push(i);
                yVals.push(y);
            }
            dataSeries.push(series);
        }
    }

    function CreateChart(dataSeries, minY, minX, rank) {
        chart = new Highcharts.Chart({
            chart: { renderTo: 'visualization_container', defaultSeriesType: 'scatter', zoomType: rank ? 'x': 'xy' },

            legend: { align: 'left', backgroundColor: '#FFFFFF', borderWidth: 1, floating: true, layout: 'vertical', verticalAlign: 'top', x: 100, y: 50 },

            plotOptions: { area: { fillColor: { linearGradient: [0, 0, 0, 300], stops: [] }, lineWidth: 1, marker: { enabled: false, states: { hover: { enabled: true, radius: 5 } } }, pointStart: 0, pointInterval: 1, shadow: false, states: { hover: { lineWidth: 1 } } } },

            title: { text: 'Характеристики однородных цепочек @ViewBag.chainName' },

            tooltip: {
                formatter: function() {
                    return this.point.name + '<br/> '+ this.x + '<br/>' + this.y;
                }
            },

            xAxis: { min: minX, maxZoom: maxZoomX, title: { text: rank ? 'Фрагменты цепочки' : $("#xaxis option:selected")[0].text } },

            yAxis: { endOnTick: false, startOnTick: false, min: minY, title: { text: $("#yaxis option:selected")[0].text } },

            series: dataSeries
        });
    }
    
    

    function DrawChart() {
        xVals = new Array();
        yVals = new Array();
        var dataSeries = new Array();
        var logarithmic = $("#logarithmicScale")[0].checked;
        if ($("#allGraphics")[0].checked) {
            for (var j = 0; j < $("#yaxis option").length; j++) {
                FillRankSeries($("#yaxis option")[j].value, logarithmic,dataSeries);
            }
        } else {
            if($("#Rank")[0].checked) {
                for(var n = 0; n < series.length; n++) {
                    FillRankSeries($("#yaxis option:selected")[0].value, logarithmic, dataSeries);
                }
                
            } else {
                FillSeries($("#yaxis option:selected")[0].value, $("#xaxis option:selected")[0].value, logarithmic, dataSeries);
            }
        }
        if (theoreticalRanks.length > 0) {
            FillTheoreticalRanks(logarithmic, dataSeries);
        }
        CreateChart(dataSeries, Math.min.apply(null, yVals), Math.min.apply(null, xVals), $("#Rank")[0].checked);
    }
</script>
@for (int d = 0; d < ViewBag.characteristics.Count; d++)
{
    <table id="resultTable">
        <thead>
            <tr>
                <th>
                    Название цепочки
                </th>
                @foreach (var characteristicName in ViewBag.characteristicNames)
                {
                    <th>
                        @characteristicName
                    </th>
                }
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < ViewBag.characteristics[d][0].Count; i++)
            {
                <tr>
                    <td id="chainNameCell">
                        @ViewBag.elementNames[d][i]
                    </td>
                    @foreach (var characteristic in ViewBag.characteristics[d])
                    {
                        <td>
                            @characteristic[i].Value
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    
}

<br/>
<div id="visualization_container" style="width: 800px; height: 500px"></div>
<br/>
<br/>
<input type="checkbox" name = "Rank" id="Rank" value="true" onclick="SwitchXAxis()">Ранговое распределение</input>
<br/>
<input type="checkbox" name = "allGraphics" id="allGraphics" value="true" disabled="disabled" onclick="SwitchYAxis()">Вывести все графики сразу</input>
<br/>
<input type="checkbox" name = "logarithmicScale" id="logarithmicScale" value="true" disabled="disabled">Логарифмический масштаб</input>
<br/>
<br/>
<div id="xhider">
    @Html.Label("Ось x")
    <select name="xaxis" id="xaxis">
        @foreach (var option in ViewBag.characteristicsList)
        {
            <option value="@option.Value">@option.Text</option>
        }
    </select>
</div>
<br/>
<div id="yhider">
    @Html.Label("Ось y")
    <select name="yaxis" id="yaxis">
        @foreach (var option in ViewBag.characteristicsList)
        {
            <option value="@option.Value">@option.Text</option>
        }
    </select>
</div>
<br/>
<button onclick="DrawChart()" >Отобразить разбиение</button>