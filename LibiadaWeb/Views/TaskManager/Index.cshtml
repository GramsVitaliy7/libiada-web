@using LibiadaWeb.Models
@using LibiadaWeb.Models.Account
@using LibiadaWeb.Tasks
@{
    ViewBag.Title = "Libiada task manager";
}

<script>

    var autoRefresh = function () {
        window.location.reload();
    }

    setInterval(autoRefresh, 1 * 60 * 1000);
</script>

<h2>Task manager</h2>

@if (ViewBag.ErrorMessage != null)
{
    <div class="error-message">
        @ViewBag.ErrorMessage
    </div>
    <br />
}

<div>
    <table class="table table-bordered table-hover">
        <tr>
            <th>
                #
            </th>
            @if (UserHelper.IsAdmin())
            {
                <th>
                    User id
                </th>
            }
            <th>
                Name
            </th>
            <th>
                Created
            </th>
            <th>
                Started
            </th>
            <th>
                Completed
            </th>
            <th>
                Execution time
            </th>
            <th>
                Status
            </th>
            <th>
                Results
            </th>
            <th>
                Actions
            </th>
        </tr>

        @foreach (var item in ViewBag.Tasks)
        {
            <tr>
                <td>
                    @(item.Id + 1)
                </td>
                @if (UserHelper.IsAdmin())
                {
                    <td>
                        @item.UserId
                    </td>
                }
                <td>
                    @item.DisplayName
                </td>
                <td>
                    @item.Created.ToString(OutputFormats.DateTimeFormat)
                </td>
                <td>
                    @if (item.Started != null)
                    {
                        @item.Started.ToString(OutputFormats.DateTimeFormat)
                    }
                </td>
                <td>
                    @if (item.Completed != null)
                    {
                        @item.Completed.ToString(OutputFormats.DateTimeFormat)
                    }
                </td>
                <td>
                    @if (item.ExecutionTime != null)
                    {
                        @item.ExecutionTime.ToString(OutputFormats.TimeFormat)
                    }
                </td>
                <td>
                    @item.TaskState
                </td>
                <td>
                    @if (item.TaskState == TaskState.Completed || item.TaskState == TaskState.Error)
                    {
                        @Html.ActionLink("View result", "RedirectToResult", new { id = item.Id })
                    }
                </td>
                <td>
                    @using (Html.BeginForm("Delete", "TaskManager", FormMethod.Post))
                    {
                        @Html.AntiForgeryToken()

                        <input type="hidden" name="id" value="@item.Id" />
                        <input type="submit" value="Delete task" class="btn btn-default" />
                    }
                </td>
            </tr>
        }
    </table>
</div>

<br />
<div>
    @using (Html.BeginForm("DeleteAll", "TaskManager", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <div class="form-group">
                <div class="col-md-offset-0 col-md-10">
                    <input type="submit" value="Delete all tasks" class="btn btn-default" />
                </div>
            </div>
        </div>
    }
</div>