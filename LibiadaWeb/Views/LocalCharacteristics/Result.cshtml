@model dynamic

@{
    ViewBag.Title = "Локальные характеристики";
}

<h2>Локальные характеристики цепочки @ViewBag.chainName</h2>

<script src="@Url.Content("~/Scripts/Highcharts-2.2.1/js/highcharts.src.js")" type="text/javascript"></script>

<script type='text/javascript'>
    var characteristics = new Array();
    var partNames = new Array();
    var colors = new Array();
    var headers = new Array();

    $(document).ready(function() {
        colors.push('rgba(223, 83, 83, .5)');
        colors.push('rgba( 83, 223, 83, .5)');
        colors.push('rgba( 83, 83, 223, .5)');
        colors.push('rgba( 83, 83, 83, .5)');
        colors.push('rgba( 150, 0, 0, .5)');
        colors.push('rgba( 0, 150, 0, .5)');
        colors.push('rgba( 0, 0, 150  .5)');

        for(var l = 0; l < $("table").length; l++) {
            var tableHeaders = $("table")[l].tBodies[0].rows[0].cells;
            headers.push(tableHeaders[0].textContent);
            partNames.push(new Array());

            var rows = $("table")[l].tBodies[0].rows;
            for (var i = 1; i < rows.length; i++) {
                partNames[l].push(rows[i].cells[0].textContent);
            }
        }


        @for (int j = 0; j < ViewBag.characteristics.Count; j++)
        {
            @: characteristics.push(new Array());

            var characteristicList = ViewBag.characteristics[j];
            for (int i = 0; i < characteristicList.Count; i++)
            {
                @: characteristics[@j].push(new Array());

                var characteristic = characteristicList[i];
                for (int k = 0; k < characteristic.Count; k++)
                {
                    String[] tempValue = characteristic[k].ToString().Split(',');
                    String value = tempValue.Length == 2 ? tempValue[0] + "." + tempValue[1] : tempValue[0];
                    @: characteristics[@j][@i][@k] = @value;
                }
            }
        }
    });
    
    var yVals;

    function FillSeries(characteristicId, dataSeries) {

        for (var i = 0; i < partNames.length; i++) {
            var series = new Object();
            series.data = new Array();
            series.type = 'area';
            series.name = headers[i];
            for (var j = 0; j < partNames[i].length; j++) {
                var y = characteristics[i][j][characteristicId];
                var pointName = partNames[i][j];
                series.data[j] = new Object();
                series.data[j].x = j + 1;
                series.data[j].y = y;
                series.data[j].name = pointName;
                // массив для определения минимального значения для границ графика
                yVals.push(y);
            }
            dataSeries.push(series);
        }
    }

    function CreateChart(dataSeries, minY) {
        chart = new Highcharts.Chart({
            chart: { renderTo: 'visualization_container', defaultSeriesType: 'scatter', zoomType: 'x' },

            legend: { align: 'left', backgroundColor: '#FFFFFF', borderWidth: 1, floating: true, layout: 'vertical', verticalAlign: 'top', x: 100, y: 50 },

            plotOptions: { area: { fillColor: { linearGradient: [0, 0, 0, 300], stops: [] }, lineWidth: 1, marker: { enabled: false, states: { hover: { enabled: true, radius: 5 } } }, pointStart: 0, pointInterval: 1, shadow: false, states: { hover: { lineWidth: 1 } } } },

            title: { text: 'Локальне характеристики цепочек' },

            tooltip: {
                formatter: function() {
                    return this.point.name + '<br/> ' + this.y;
                }
            },

            xAxis: { min: 0, maxZoom: 3, title: {text: 'Фрагменты цепочки'} },

            yAxis: { endOnTick: false, startOnTick: false, min: minY, title: { text: $("#yaxis option:selected")[0].text } },

            series: dataSeries
        });
    }

    function DrawChart() {
        yVals = new Array();
        var dataSeries = new Array();
        
        if ($("#allGraphics")[0].checked) {
            for (var j = 0; j < $("#yaxis option").length; j++) {
                FillSeries($("#yaxis option")[j].value, dataSeries);
            }
        } else {
            FillSeries($("#yaxis option:selected")[0].value, dataSeries);
        }
        CreateChart(dataSeries, Math.min.apply(null, yVals));
    }
</script>

@for (int k = 0; k < ViewBag.chainNames.Count; k++)
{
    <table>
        <tr>
            <th>
                @ViewBag.chainNames[k]
            </th>
            @foreach (var characteristicName in ViewBag.characteristicNames)
            {
                <th>
                    @characteristicName
                </th>
            }
        </tr>
        @for (int i = 0; i < ViewBag.characteristics[k].Count; i++)
        {
            <tr>
                <td id="chainNameCell">
                    @ViewBag.partNames[k][i]
                </td>
                @foreach (var characteristic in ViewBag.characteristics[k][i])
                {
                    <td>
                        @characteristic
                    </td>
                }
            </tr>
        }
    </table>
}

<br/>
<div id="visualization_container" style="width: 800px; height: 500px"></div>
<br/>
@Html.Label("Ось y")
<select name="yaxis" id="yaxis">
    @foreach (var option in ViewBag.characteristicsList)
    {
        <option value="@option.Value">@option.Text</option>
    }
</select>
<br/>
<input type="checkbox" name = "allGraphics" id="allGraphics" value="true" >Вывести все графики сразу</input>
<br/>
<button onclick="DrawChart()" >Отобразить разбиение</button>